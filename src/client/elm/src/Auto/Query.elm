-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Auto.Query exposing (ExchangeCredentialsForTokenRequiredArguments, exchangeCredentialsForToken, whoami)

import Auto.InputObject
import Auto.Interface
import Auto.Object
import Auto.Scalar
import Auto.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ExchangeCredentialsForTokenRequiredArguments =
    { email : String
    , password : String
    }


exchangeCredentialsForToken : ExchangeCredentialsForTokenRequiredArguments -> SelectionSet (Maybe String) RootQuery
exchangeCredentialsForToken requiredArgs =
    Object.selectionForField "(Maybe String)" "exchangeCredentialsForToken" [ Argument.required "email" requiredArgs.email Encode.string, Argument.required "password" requiredArgs.password Encode.string ] (Decode.string |> Decode.nullable)


{-| Who am I?
-}
whoami : SelectionSet decodesTo Auto.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
whoami object_ =
    Object.selectionForCompositeField "whoami" [] object_ (identity >> Decode.nullable)
